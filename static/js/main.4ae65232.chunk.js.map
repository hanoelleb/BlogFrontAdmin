{"version":3,"sources":["blog.module.css","login.js","register.js","blog.js","App.js","constants/routes.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","props","handleSubmit","bind","handleChange","state","username","password","redirect","event","preventDefault","message","this","fetch","real","method","headers","body","JSON","stringify","then","response","json","data","localStorage","setItem","token","console","log","getItem","setState","target","name","value","isInvalid","to","className","styles","form","onSubmit","type","placeholder","onChange","disabled","React","Component","RegisterForm","pw_confirm","Blog","waiting","posts","post_list","map","post","Dashboard","PostButton","handler","openForm","formOpen","onClick","PostForm","handleSave","title","content","rows","cols","BlogPost","blog","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4ae65232.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"blog\":\"blog_blog__3JtYz\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Redirect } from 'react-router-dom'\nimport styles from './form.module.css';\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\tthis.state = ({username: '', password: '', redirect: false});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n\tconst message = {\n\t    username: this.state.username,\n            password: this.state.password\n\t};\n        \n\tvar test = 'http://localhost:8080/';\n        var real = 'https://hanoelleb-blog-api.herokuapp.com/';\n\tconst response =\n            fetch(real + 'api/login', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)})\n                .then(response => response.json())\n                .then( data => {\n\t\t    localStorage.setItem('token', data.token);\n                    console.log(localStorage.getItem('token'));\n\t\t    this.setState({redirect: true});\n                });\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.name] : event.target.value });\n    }\n\n    render() {\n        var isInvalid = this.username === '' ||\n\t\t        this.password === '';\n\n\tif (this.state.redirect) \n\t    return < Redirect to='/blog' />\n        return (\n\t<div>\n            <form className={styles.form} onSubmit={this.handleSubmit}>\n\t\t<h2>Login</h2>\n\t\t<input type='text' placeholder='Username' name='username'\n\t\t    onChange={this.handleChange}\n\t\t    value={this.state.username}\n\t\t>\n\t\t</input>\n\n\t\t<input type='password' placeholder='Password' name='password'\n\t\t    onChange={this.handleChange}\n\t            value={this.state.password}\n\t\t>\n\t\t</input>\n\n\t\t<input type='submit' value='Login' disabled={isInvalid}>\n\t\t</input>\n            </form>\t\t\n\t    <Link to='/register'>No account? Register</Link>\n\t</div>\n\t)\n    }\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './form.module.css';\n\nclass RegisterForm extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.handleSubmit = this.handleSubmit.bind(this);\n\tthis.handleChange = this.handleChange.bind(this);\n\tthis.state = { username: '', password: '', pw_confirm: ''};\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        const message = { \n\t    username: this.state.username, \n\t    password: this.state.password \n\t};\n\n\tconst response = \n\t    fetch('https://hanoelleb-blog-api.herokuapp.com/api/register', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)})\n\t        .then(response => response.json())\n\t        .then( data => {\n\t            console.log('message: ' + data.message);\n\t        });\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.name] : event.target.value});\n    }\n\n    render() {\n        var isInvalid = this.state.username === '' ||\n\t\t      this.state.password === '' ||\n\t\t      this.state.pw_confirm === '' ||\n\t\t      this.state.password !== this.state.pw_confirm;\n\n        return (\n\t<div>\n            <form className={styles.form} onSubmit={this.handleSubmit}>\n                <h2>Register</h2>\n                <input type='text' placeholder='Username' name='username'\n\t\t    onChange={this.handleChange} value={this.state.username}>\n\t\t</input>\n\n                <input type='password' placeholder='Password' name='password'\n\t\t    onChange={this.handleChange} value={this.state.password}>\n\t\t</input>\n\n\t\t<input type='password' placeholder='Confirm Password'\n\t\t    name='pw_confirm' onChange={this.handleChange}\n\t\t    value={this.state.pw_confirm}>\n\t\t</input>\n\n                <input type='submit' value='Submit' disabled={isInvalid}>\n\t\t</input>\n            </form>\n\t    <Link to='/'>Have an account?</Link>\n\t</div>\n        )\n    }\n}\n\nexport default RegisterForm;\n\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport styles from './blog.module.css';\n\nclass Blog extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.state = ({token: localStorage.getItem('token'), \n\t    waiting: true, posts: []});\n    }\n\n    componentDidMount() {\n\tvar test = 'http://localhost:8080/';\n        var real = 'https://hanoelleb-blog-api.herokuapp.com/';\n        fetch(real + 'api/posts')\n\t    .then( response => response.json() )\n\t    .then( data => { \n\t\tthis.setState({posts: data.posts.post_list, waiting: false});\n\t    });\n    }\n\n    render() {\n\tconsole.log(this.state.token);\n\tif (this.state.token === '') {\n\t    return < Redirect to='/' />\n\t}\n        return (\n\t    <div>\n\t\t<h2>Blog</h2>\n\t\t<Dashboard />\n\t\t{ this.state.waiting ? '' : \n\t\t    this.state.posts.map( post => \n                        < BlogPost post={post} />\n\t\t    )\n\t\t}\n            </div>\n\t)\n    }\n}\n\nclass Dashboard extends React.Component {\n    render() {\n        return (\n\t    <div>\n\t\t< PostButton />\n\t\t<button>Drafts</button>\n            </div>\n\t)\n    }\n}\n\nclass PostButton extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.handler = this.handler.bind(this);\n\tthis.openForm = this.openForm.bind(this);\n\tthis.state = ({formOpen: false});\n    }\n\n    handler() {\n        this.setState({formOpen: false});\n    }\n\n    openForm() {\n        this.setState({formOpen: true});\n    }\n\n    render() {\n        return (\n            <div>\n\t        <button onClick={this.openForm}>New Post</button>\n\t\t{ this.state.formOpen ? \n\t\t    <PostForm handler={this.handler} /> : null }\n            </div>\n\t)\n    }\n}\n\nclass PostForm extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.handleChange = this.handleChange.bind(this);\n\tthis.handleSave = this.handleSave.bind(this);\n\tthis.handleSubmit = this.handleSubmit.bind(this);\n\tthis.state = ({title: '', content: ''});\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSave() {\n    }\n\n    handleSubmit(event) {\n\tevent.preventDefault();\n\tconst post = {\n\t    title: this.state.title,\n\t    content: this.state.content\n\t};\n        var test = 'http://localhost:8080/';\n\tvar real = 'https://hanoelleb-blog-api.herokuapp.com/';\n\tconst response =\n\t    fetch(real + 'api/post/create',\n\t    {\n                method: 'POST',\n\t\theaders: {\n\t\t    'Authorization': localStorage.getItem('token'),\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify(post)\n\t    }).then( response => response.json())\n              .then( data => {\n\t\t      console.log(data.message);\n\t\t  }\n\t      );\n\n\t this.props.handler();\n    }\n\n    render() {\n        return (\n\t    <form onSubmit={this.handleSubmit}>\n\t\t<button onClick={this.props.handler}>Cancel</button>\n                <input type='text' name='title' \n                    onChange={this.handleChange}\n\t\t    value = {this.state.title}\n\t\t    placeholder='Post Title'>\n\t\t</input>\n\n\t\t<textarea rows='10' cols='40' name='content' \n\t\t    onChange={this.handleChange}\n\t\t    value = {this.state.content}\n\t\t    placeholder='Post content'>\n\t\t</textarea>\n\n\t\t<button>Save</button>\n\t\t<input type='submit' value='Post'></input>\n            </form>\n\t)\n    }\n}\n\nclass BlogPost extends React.Component {\n    render() {\n        return (\n\t<div className={styles.blog}>\n\t    <h2>{this.props.post.title}</h2>\n            <p>{this.props.post.content}</p>\n\t    <button>Edit</button>\n\t    <button>Remove</button>\n\t</div>\n\t)\n    }\n}\n\nexport default Blog;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport './App.css';\nimport * as ROUTES from './constants/routes';\nimport LoginForm from './login';\nimport RegisterForm from './register';\nimport Blog from './blog';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t  <Router>\n              <Route exact path={ROUTES.landing} component={LoginForm} />\n\t      <Route path={ROUTES.register} component={RegisterForm} />\n\t      <Route path={ROUTES.blog} component={Blog} />\n\t  </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const landing = '/';\nexport const register = '/register';\nexport const blog = '/blog';\nexport const create_post = '/blog/post/create';\nexport const update_post = '/blog/post/:id/edit';\nexport const remove_post = '/blog/post/:id/remove';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}